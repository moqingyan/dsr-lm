// CLUTRR Scallop

// question :: (sub, obj) represents a question asking about relation between `sub` and `obj`
type question(sub: String, obj: String)

// context :: (rela, sub, obj) represents there is a `rela` between `sub` and `obj`
type context(rela: usize, sub: String, obj: String)

// Relation level higher-order relationships
type transitive(r1: usize, r2: usize, r3: usize)
type valid_transitive(r1: usize, r2: usize, r3: usize)

// Things can be derived through context propagation
rel derived(r, s, o) = context(r, s, o)

// Transitive
rel derived(r3, x, z) = valid_transitive(r1, r2, r3), derived(r1, x, y), derived(r2, y, z), x != z

// Answer
rel answer(r) = question(s, o), derived(r, s, o)

// CLUTRR Scallop
const DAUGHTER = 0
const SISTER = 1
const SON = 2
const AUNT = 3
const FATHER = 4
const HUSBAND = 5
const GRANDDAUGHTER = 6
const BROTHER = 7
const NEPHEW = 8
const MOTHER = 9
const UNCLE = 10
const GRANDFATHER = 11
const WIFE = 12
const GRANDMOTHER = 13
const NIECE = 14
const GRANDSON = 15
const SON_IN_LAW = 16
const FATHER_IN_LAW = 17
const DAUGHTER_IN_LAW = 18
const MOTHER_IN_LAW = 19

rel female = {DAUGHTER, SISTER, AUNT, GRANDDAUGHTER, MOTHER, WIFE, GRANDMOTHER, NIECE, DAUGHTER_IN_LAW, MOTHER_IN_LAW}
rel male = {SON, FATHER, HUSBAND, BROTHER, NEPHEW, UNCLE, GRANDFATHER, GRANDSON, SON_IN_LAW, FATHER_IN_LAW}
rel generation = {
    (GRANDDAUGHTER, -2),
    (GRANDSON, -2),
    (DAUGHTER, -1),
    (SON, -1),
    (NIECE, -1),
    (NEPHEW, -1),
    (SON_IN_LAW, -1),
    (DAUGHTER_IN_LAW, -1),
    (SISTER, 0),
    (BROTHER, 0),
    (WIFE, 0),
    (HUSBAND, 0),
    (MOTHER_IN_LAW, 1),
    (FATHER_IN_LAW, 1),
    (MOTHER, 1),
    (FATHER, 1),
    (UNCLE, 1),
    (AUNT, 1),
    (GRANDFATHER, 2),
    (GRANDMOTHER, 2),
    }

rel valid_transitive_generation(r1, r2, r3) = transitive(r1, r2, r3), generation(r1, g1), generation(r2, g2), generation(r3, g1 + g2)
rel valid_transitive_gender(r1, r2, r3) = transitive(r1, r2, r3), male(r2), male(r3)
rel valid_transitive_gender(r1, r2, r3) = transitive(r1, r2, r3), female(r2), female(r3)

rel valid_transitive_marry(r1, HUSBAND, r3) = transitive(r1, HUSBAND, r3), female(r1), male(r3)
rel valid_transitive_marry(r1, WIFE, r3) = transitive(r1, WIFE, r3), male(r1), female(r3)
rel valid_transitive_marry(r1, r2, r3) = transitive(r1, r2, r3), r2 != HUSBAND, r2 != WIFE

rel valid_transitive_in_law(r1, r2, r3) = transitive(r1, r2, r3),
                                            r1 != DAUGHTER_IN_LAW, r1 != SON_IN_LAW, r1 != MOTHER_IN_LAW, r1 != FATHER_IN_LAW,
                                            r2 != DAUGHTER_IN_LAW, r2 != SON_IN_LAW, r2 != MOTHER_IN_LAW, r2 != FATHER_IN_LAW
rel valid_transitive(r1, r2, r3) = valid_transitive_gender(r1, r2, r3), valid_transitive_generation(r1, r2, r3), valid_transitive_in_law(r1, r2, r3), valid_transitive_marry(r1, r2, r3)
// rel valid_transitive(r1, r2, r3) = valid_transitive_gender(r1, r2, r3), valid_transitive_generation(r1, r2, r3), valid_transitive_in_law(r1, r2, r3)


// query valid_transitive
// One person only has one gender
// rel violate_ic(!result) = result = forall(r1, r2, a, b: (derived(r1, a, b), derived(r2, c, b)) => (female(r1), female(r2)))
// rel violate_ic(!result) = result = forall(r1, r2, a, b: (derived(r1, a, b), derived(r2, c, b)) => (male(r1), male(r2)))

// // Relations between specific entities
rel violate_ic(!result) = result = forall(a, b: derived(GRANDFATHER, a, b) => (derived(GRANDSON, b, a) or derived(GRANDDAUGHTER, b, a)))
rel violate_ic(!result) = result = forall(a, b: derived(GRANDMOTHER, a, b) => (derived(GRANDSON, b, a) or derived(GRANDDAUGHTER, b, a)))
rel violate_ic(!result) = result = forall(a, b: derived(FATHER, a, b) => (derived(SON, b, a) or derived(DAUGHTER, b, a)))
rel violate_ic(!result) = result = forall(a, b: derived(MOTHER, a, b) => (derived(SON, b, a) or derived(DAUGHTER, b, a)))
rel violate_ic(!result) = result = forall(a, b: derived(HUSBAND, a, b) => derived(WIFE, b, a))
rel violate_ic(!result) = result = forall(a, b: derived(BROTHER, a, b) => (derived(BROTHER, b, a) or derived(SISTER, b, a)))


// rel violate_ic(!result) = result = forall(a, b: derived(GRANDFATHER, a, b) => (derived(GRANDSON, b, a) or derived(GRANDDAUGHTER, b, a)))
// rel violate_ic(!result) = result = forall(a, b: derived(GRANDSON, a, b) => (derived(GRANDFATHER, b, a) or derived(GRANDMOTHER, b, a)))
// rel violate_ic(!result) = result = forall(a, b: derived(GRANDMOTHER, a, b) => (derived(GRANDSON, b, a) or derived(GRANDDAUGHTER, b, a)))
// rel violate_ic(!result) = result = forall(a, b: derived(GRANDDAUGTHER, a, b) => (derived(GRANDFATHER, b, a) or derived(GRANDMOTHER, b, a)))
