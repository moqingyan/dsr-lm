// CLUTRR Scallop

// question :: (sub, obj) represents a question asking about relation between `sub` and `obj`
type question(sub: String, obj: String)

// context :: (rela, sub, obj) represents there is a `rela` between `sub` and `obj`
type context(rela: usize, sub: String, obj: String)

// Relation level higher-order relationships
type transitive(r1: usize, r2: usize, r3: usize)

// Things can be derived through context propagation
rel derived(r, s, o) = context(r, s, o)

// Transitive
rel derived(r3, x, z) = transitive(r1, r2, r3), derived(r1, x, y), derived(r2, y, z), x != z

// Answer
rel answer(r) = question(s, o), derived(r, s, o)


rel violate_ic(!result) = result = forall(a, b: derived(11, a, b) => (derived(15, b, a) or derived(6, b, a)))
rel violate_ic(!result) = result = forall(a, b: derived(13, a, b) => (derived(15, b, a) or derived(6, b, a))) // grandmother => grandson / granddaughter
rel violate_ic(!result) = result = forall(a, b: derived(4, a, b) => (derived(2, b, a) or derived(0, b, a))) // father => son / daughter
rel violate_ic(!result) = result = forall(a, b: derived(9, a, b) => (derived(2, b, a) or derived(0, b, a)))
rel violate_ic(!result) = result = forall(a, b: derived(5, a, b) => derived(12, b, a))
rel violate_ic(!result) = result = forall(a, b: derived(7, a, b) => (derived(7, b, a) or derived(1, b, a)))
